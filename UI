-- Relic UI Library - Simplified Modern Version
-- Version 2.0

local RelicLib = {}
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local SoundService = game:GetService("SoundService")

local Player = Players.LocalPlayer
local PlayerGui = Player:WaitForChild("PlayerGui")

-- Configuration
local Config = {
    AccentColor = Color3.fromRGB(88, 101, 242),
    BackgroundColor = Color3.fromRGB(25, 25, 30),
    SecondaryColor = Color3.fromRGB(35, 35, 40),
    TextColor = Color3.fromRGB(255, 255, 255),
    BorderColor = Color3.fromRGB(88, 101, 242),
    
    -- Sounds
    HoverSound = "rbxasset://sounds/electronicpingshort.wav",
    ClickSound = "rbxasset://sounds/button-09.mp3",
    
    -- Sizes
    MainUISize = UDim2.new(0, 380, 0, 280),
    CategoryWidth = 45,
    TopBarHeight = 35,
    Gap = 15,
    
    -- Asset IDs for logos
    HomeIcon = "rbxassetid://10723434711",
    SettingsIcon = "rbxassetid://10734950020", 
    InfoIcon = "rbxassetid://10734924532",
    LogoIcon = "rbxassetid://10709769841"
}

-- Variables
local MainUI = nil
local CategoryUI = nil
local TopBarUI = nil
local ScreenGui = nil
local CurrentTab = "Home"
local IsUIVisible = true
local NotificationCount = 0
local Categories = {}
local MinSize = UDim2.new(0, 250, 0, 180)
local MaxSize = UDim2.new(0, 800, 0, 600)

-- Utility Functions
local function CreateSound(soundId)
    local sound = Instance.new("Sound")
    sound.SoundId = soundId
    sound.Volume = 0.3
    sound.Parent = SoundService
    return sound
end

local function GetFormattedTime()
    local time = os.date("*t")
    local hour = time.hour
    local ampm = "AM"
    
    if hour >= 12 then
        ampm = "PM"
        if hour > 12 then
            hour = hour - 12
        end
    elseif hour == 0 then
        hour = 12
    end
    
    return string.format("%d:%02d %s", hour, time.min, ampm)
end

local function CreateStroke(parent, color, thickness)
    local stroke = Instance.new("UIStroke")
    stroke.Color = color or Color3.fromRGB(0, 0, 0)
    stroke.Thickness = thickness or 1
    stroke.Parent = parent
    return stroke
end

local function CreateCorner(parent, radius)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius or 6)
    corner.Parent = parent
    return corner
end

local function TweenProperty(object, properties, duration)
    local tween = TweenService:Create(object, TweenInfo.new(duration or 0.15, Enum.EasingStyle.Quad), properties)
    tween:Play()
    return tween
end

-- Create gradient for notifications
local function CreateGradient(parent, startColor, endColor)
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, startColor),
        ColorSequenceKeypoint.new(1, endColor)
    }
    gradient.Rotation = 45
    gradient.Parent = parent
    return gradient
end

-- Animation Functions
local function CreateHoverEffect(element)
    local hoverSound = CreateSound(Config.HoverSound)
    local clickSound = CreateSound(Config.ClickSound)
    
    element.MouseEnter:Connect(function()
        hoverSound:Play()
        TweenProperty(element, {Size = element.Size + UDim2.new(0, 2, 0, 2)})
    end)
    
    element.MouseLeave:Connect(function()
        TweenProperty(element, {Size = element.Size - UDim2.new(0, 2, 0, 2)})
    end)
    
    if element:IsA("TextButton") or element:IsA("ImageButton") then
        element.MouseButton1Click:Connect(function()
            clickSound:Play()
        end)
    end
end

-- Update UI positions based on main UI size
local function UpdateUIPositions()
    if not MainUI or not CategoryUI or not TopBarUI then return end
    
    local mainSize = MainUI.Size
    local mainPos = MainUI.Position
    
    -- Update category position (left side with gap)
    CategoryUI.Position = UDim2.new(0, mainPos.X.Offset - Config.CategoryWidth - Config.Gap, 0, mainPos.Y.Offset + (mainSize.Y.Offset - CategoryUI.Size.Y.Offset) / 2)
    
    -- Update topbar position (above with gap)
    TopBarUI.Position = UDim2.new(0, mainPos.X.Offset, 0, mainPos.Y.Offset - Config.TopBarHeight - Config.Gap)
end

-- Create resize handle
local function CreateResizeHandle(parent)
    local resizeHandle = Instance.new("TextButton")
    resizeHandle.Size = UDim2.new(0, 15, 0, 15)
    resizeHandle.Position = UDim2.new(1, -15, 1, -15)
    resizeHandle.BackgroundColor3 = Config.AccentColor
    resizeHandle.BorderSizePixel = 0
    resizeHandle.Text = ""
    resizeHandle.ZIndex = 10
    resizeHandle.Parent = parent
    
    CreateCorner(resizeHandle, 3)
    
    -- Resize functionality
    local dragging = false
    local startSize = parent.Size
    local startPos = UDim2.new(0, 0, 0, 0)
    
    resizeHandle.MouseButton1Down:Connect(function()
        dragging = true
        startSize = parent.Size
        local mouse = Player:GetMouse()
        startPos = UDim2.new(0, mouse.X, 0, mouse.Y)
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local mouse = Player:GetMouse()
            local deltaX = mouse.X - startPos.X.Offset
            local deltaY = mouse.Y - startPos.Y.Offset
            
            local newSize = UDim2.new(0, startSize.X.Offset + deltaX, 0, startSize.Y.Offset + deltaY)
            
            -- Clamp to min/max size
            newSize = UDim2.new(0, 
                math.max(MinSize.X.Offset, math.min(MaxSize.X.Offset, newSize.X.Offset)),
                0,
                math.max(MinSize.Y.Offset, math.min(MaxSize.Y.Offset, newSize.Y.Offset))
            )
            
            parent.Size = newSize
            UpdateUIPositions()
        end
    end)
    
    return resizeHandle
end

-- Create Main UI Structure
local function CreateMainUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "RelicUI"
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    screenGui.Parent = PlayerGui
    
    -- Main Frame
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = Config.MainUISize
    mainFrame.Position = UDim2.new(0.5, -Config.MainUISize.X.Offset/2, 0.5, -Config.MainUISize.Y.Offset/2)
    mainFrame.BackgroundColor3 = Config.BackgroundColor
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = screenGui
    
    CreateCorner(mainFrame, 8)
    
    -- Add resize handle
    CreateResizeHandle(mainFrame)
    
    MainUI = mainFrame
    ScreenGui = screenGui
    return screenGui
end

-- Create Top Bar (draggable)
local function CreateTopBar()
    local topBar = Instance.new("Frame")
    topBar.Name = "TopBar"
    topBar.Size = UDim2.new(0, Config.MainUISize.X.Offset, 0, Config.TopBarHeight)
    topBar.Position = UDim2.new(0.5, -Config.MainUISize.X.Offset/2, 0.5, -Config.MainUISize.Y.Offset/2 - Config.TopBarHeight - Config.Gap)
    topBar.BackgroundColor3 = Config.SecondaryColor
    topBar.BorderSizePixel = 0
    topBar.Parent = ScreenGui
    
    CreateCorner(topBar, 6)
    
    -- Logo in top left
    local logo = Instance.new("ImageLabel")
    logo.Size = UDim2.new(0, 25, 0, 25)
    logo.Position = UDim2.new(0, 5, 0, 5)
    logo.BackgroundTransparency = 1
    logo.Image = Config.LogoIcon
    logo.Parent = topBar
    
    -- Title in center
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, -60, 1, 0)
    title.Position = UDim2.new(0, 30, 0, 0)
    title.BackgroundTransparency = 1
    title.Text = "Relic.lol"
    title.TextColor3 = Config.AccentColor
    title.TextSize = 16
    title.Font = Enum.Font.GothamBold
    title.TextXAlignment = Enum.TextXAlignment.Center
    title.Parent = topBar
    
    CreateStroke(title, Color3.fromRGB(0, 0, 0), 1)
    
    -- Time Display (transparent background)
    local timeLabel = Instance.new("TextLabel")
    timeLabel.Size = UDim2.new(0, 70, 1, -6)
    timeLabel.Position = UDim2.new(1, -75, 0, 3)
    timeLabel.BackgroundTransparency = 1
    timeLabel.Text = GetFormattedTime()
    timeLabel.TextColor3 = Config.TextColor
    timeLabel.TextSize = 12
    timeLabel.Font = Enum.Font.Gotham
    timeLabel.Parent = topBar
    
    CreateStroke(timeLabel, Color3.fromRGB(0, 0, 0), 1)
    
    -- Update time
    spawn(function()
        while true do
            wait(1)
            if timeLabel.Parent then
                timeLabel.Text = GetFormattedTime()
            end
        end
    end)
    
    -- Make draggable (moves entire UI system)
    local UIDragDetector = Instance.new("UIDragDetector")
    UIDragDetector.Parent = topBar
    
    UIDragDetector.DragStart:Connect(function()
        -- Store relative positions
    end)
    
    UIDragDetector.DragEnd:Connect(function()
        UpdateUIPositions()
    end)
    
    TopBarUI = topBar
    return topBar
end

-- Create Category UI with auto-scaling
local function CreateCategoryUI()
    local categoryFrame = Instance.new("ScrollingFrame")
    categoryFrame.Name = "CategoryFrame"
    categoryFrame.Size = UDim2.new(0, Config.CategoryWidth, 0, 100) -- Will auto-scale
    categoryFrame.Position = UDim2.new(0.5, -Config.MainUISize.X.Offset/2 - Config.CategoryWidth - Config.Gap, 0.5, -50)
    categoryFrame.BackgroundColor3 = Config.SecondaryColor
    categoryFrame.BorderSizePixel = 0
    categoryFrame.ScrollBarThickness = 3
    categoryFrame.ScrollBarImageColor3 = Config.AccentColor
    categoryFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    categoryFrame.Parent = ScreenGui
    
    CreateCorner(categoryFrame, 6)
    
    -- Layout for categories
    local layout = Instance.new("UIListLayout")
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Padding = UDim.new(0, 5)
    layout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    layout.Parent = categoryFrame
    
    -- Auto-scale height based on content
    layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        local contentHeight = layout.AbsoluteContentSize.Y + 10
        local maxHeight = Config.MainUISize.Y.Offset * 0.8
        
        if contentHeight > maxHeight then
            categoryFrame.Size = UDim2.new(0, Config.CategoryWidth, 0, maxHeight)
            categoryFrame.CanvasSize = UDim2.new(0, 0, 0, contentHeight)
        else
            categoryFrame.Size = UDim2.new(0, Config.CategoryWidth, 0, contentHeight)
            categoryFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
        end
        
        UpdateUIPositions()
    end)
    
    CategoryUI = categoryFrame
    return categoryFrame
end

-- Add category to the category UI
function RelicLib:AddCategory(name, iconId, callback)
    local button = Instance.new("ImageButton")
    button.Name = name .. "Button"
    button.Size = UDim2.new(0, 35, 0, 35)
    button.BackgroundColor3 = Config.SecondaryColor
    button.BorderSizePixel = 0
    button.Image = iconId
    button.Parent = CategoryUI
    
    CreateCorner(button, 6)
    CreateHoverEffect(button)
    
    if callback then
        button.MouseButton1Click:Connect(callback)
    end
    
    table.insert(Categories, {name = name, button = button})
    return button
end

-- UI Elements Creation Functions (simplified and smaller)
function RelicLib:CreateButton(parent, text, callback)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0, 150, 0, 28)
    button.BackgroundColor3 = Config.SecondaryColor
    button.BorderSizePixel = 0
    button.Text = text or "Button"
    button.TextColor3 = Config.TextColor
    button.TextSize = 13
    button.Font = Enum.Font.Gotham
    button.Parent = parent
    
    CreateCorner(button, 4)
    CreateStroke(button, Color3.fromRGB(0, 0, 0), 1)
    CreateHoverEffect(button)
    
    if callback then
        button.MouseButton1Click:Connect(callback)
    end
    
    return button
end

function RelicLib:CreateToggle(parent, text, default, callback)
    local toggleFrame = Instance.new("Frame")
    toggleFrame.Size = UDim2.new(0, 200, 0, 25)
    toggleFrame.BackgroundTransparency = 1
    toggleFrame.Parent = parent
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0, 140, 1, 0)
    label.Position = UDim2.new(0, 0, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = text or "Toggle"
    label.TextColor3 = Config.TextColor
    label.TextSize = 12
    label.Font = Enum.Font.Gotham
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = toggleFrame
    
    CreateStroke(label, Color3.fromRGB(0, 0, 0), 1)
    
    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(0, 45, 0, 20)
    toggleButton.Position = UDim2.new(1, -45, 0, 2.5)
    toggleButton.BackgroundColor3 = default and Config.AccentColor or Config.SecondaryColor
    toggleButton.BorderSizePixel = 0
    toggleButton.Text = default and "ON" or "OFF"
    toggleButton.TextColor3 = Config.TextColor
    toggleButton.TextSize = 10
    toggleButton.Font = Enum.Font.GothamBold
    toggleButton.Parent = toggleFrame
    
    CreateCorner(toggleButton, 10)
    CreateStroke(toggleButton, Color3.fromRGB(0, 0, 0), 1)
    CreateHoverEffect(toggleButton)
    
    local isToggled = default or false
    
    toggleButton.MouseButton1Click:Connect(function()
        isToggled = not isToggled
        toggleButton.Text = isToggled and "ON" or "OFF"
        toggleButton.BackgroundColor3 = isToggled and Config.AccentColor or Config.SecondaryColor
        
        if callback then
            callback(isToggled)
        end
    end)
    
    return toggleFrame
end

function RelicLib:CreateSlider(parent, text, min, max, default, callback)
    local sliderFrame = Instance.new("Frame")
    sliderFrame.Size = UDim2.new(0, 220, 0, 40)
    sliderFrame.BackgroundTransparency = 1
    sliderFrame.Parent = parent
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 0, 15)
    label.Position = UDim2.new(0, 0, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = text or "Slider"
    label.TextColor3 = Config.TextColor
    label.TextSize = 12
    label.Font = Enum.Font.Gotham
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = sliderFrame
    
    CreateStroke(label, Color3.fromRGB(0, 0, 0), 1)
    
    local sliderTrack = Instance.new("Frame")
    sliderTrack.Size = UDim2.new(1, -40, 0, 6)
    sliderTrack.Position = UDim2.new(0, 0, 0, 20)
    sliderTrack.BackgroundColor3 = Config.SecondaryColor
    sliderTrack.BorderSizePixel = 0
    sliderTrack.Parent = sliderFrame
    
    CreateCorner(sliderTrack, 3)
    
    local sliderFill = Instance.new("Frame")
    sliderFill.Size = UDim2.new(0, 0, 1, 0)
    sliderFill.Position = UDim2.new(0, 0, 0, 0)
    sliderFill.BackgroundColor3 = Config.AccentColor
    sliderFill.BorderSizePixel = 0
    sliderFill.Parent = sliderTrack
    
    CreateCorner(sliderFill, 3)
    
    local valueLabel = Instance.new("TextLabel")
    valueLabel.Size = UDim2.new(0, 35, 0, 15)
    valueLabel.Position = UDim2.new(1, -35, 0, 17)
    valueLabel.BackgroundTransparency = 1
    valueLabel.Text = tostring(default or min)
    valueLabel.TextColor3 = Config.TextColor
    valueLabel.TextSize = 10
    valueLabel.Font = Enum.Font.Gotham
    valueLabel.Parent = sliderFrame
    
    CreateStroke(valueLabel, Color3.fromRGB(0, 0, 0), 1)
    
    local currentValue = default or min
    local dragging = false
    
    local function updateSlider(value)
        local percent = (value - min) / (max - min)
        sliderFill.Size = UDim2.new(percent, 0, 1, 0)
        valueLabel.Text = tostring(math.floor(value))
        currentValue = value
        
        if callback then
            callback(value)
        end
    end
    
    sliderTrack.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local mouse = Player:GetMouse()
            local relativeX = mouse.X - sliderTrack.AbsolutePosition.X
            local percent = math.clamp(relativeX / sliderTrack.AbsoluteSize.X, 0, 1)
            local value = min + (max - min) * percent
            updateSlider(value)
        end
    end)
    
    updateSlider(currentValue)
    return sliderFrame
end

function RelicLib:CreateLabel(parent, text)
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0, 200, 0, 20)
    label.BackgroundTransparency = 1
    label.Text = text or "Label"
    label.TextColor3 = Config.TextColor
    label.TextSize = 12
    label.Font = Enum.Font.Gotham
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = parent
    
    CreateStroke(label, Color3.fromRGB(0, 0, 0), 1)
    return label
end

-- Modern notification system with gradient
function RelicLib:CreateNotification(title, message, duration, position)
    NotificationCount = NotificationCount + 1
    local notificationId = NotificationCount
    
    local notification = Instance.new("Frame")
    notification.Size = UDim2.new(0, 250, 0, 60)
    notification.BorderSizePixel = 0
    notification.ZIndex = 100
    
    -- Position notifications
    if position == "top-left" then
        notification.Position = UDim2.new(0, 15, 0, 15 + (notificationId - 1) * 70)
    else -- bottom-right
        notification.Position = UDim2.new(1, -265, 1, -75 - (notificationId - 1) * 70)
    end
    
    notification.Parent = ScreenGui
    
    CreateCorner(notification, 6)
    CreateGradient(notification, Config.AccentColor, Color3.fromRGB(0, 0, 0))
    
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, -15, 0, 18)
    titleLabel.Position = UDim2.new(0, 8, 0, 5)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title or "Notification"
    titleLabel.TextColor3 = Config.TextColor
    titleLabel.TextSize = 13
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = notification
    
    CreateStroke(titleLabel, Color3.fromRGB(0, 0, 0), 1)
    
    local messageLabel = Instance.new("TextLabel")
    messageLabel.Size = UDim2.new(1, -15, 0, 35)
    messageLabel.Position = UDim2.new(0, 8, 0, 20)
    messageLabel.BackgroundTransparency = 1
    messageLabel.Text = message or ""
    messageLabel.TextColor3 = Config.TextColor
    messageLabel.TextSize = 11
    messageLabel.Font = Enum.Font.Gotham
    messageLabel.TextXAlignment = Enum.TextXAlignment.Left
    messageLabel.TextWrapped = true
    messageLabel.Parent = notification
    
    CreateStroke(messageLabel, Color3.fromRGB(0, 0, 0), 1)
    
    -- Slide in animation
    local originalPos = notification.Position
    notification.Position = originalPos + UDim2.new(0, 270, 0, 0)
    TweenProperty(notification, {Position = originalPos}, 0.3)
    
    -- Auto close
    spawn(function()
        wait(duration or 3)
        TweenProperty(notification, {Position = originalPos + UDim2.new(0, 270, 0, 0)}, 0.3)
        wait(0.3)
        notification:Destroy()
        NotificationCount = math.max(0, NotificationCount - 1)
    end)
end

-- Toggle UI Visibility
local function ToggleUI()
    IsUIVisible = not IsUIVisible
    local targetTransparency = IsUIVisible and 0 or 1
    
    for _, ui in pairs({MainUI, CategoryUI, TopBarUI}) do
        if ui then
            TweenProperty(ui, {BackgroundTransparency = targetTransparency}, 0.2)
            for _, child in pairs(ui:GetDescendants()) do
                if child:IsA("GuiObject") then
                    if child:IsA("TextLabel") or child:IsA("TextButton") then
                        TweenProperty(child, {TextTransparency = targetTransparency}, 0.2)
                    end
                    if child:IsA("ImageLabel") or child:IsA("ImageButton") then
                        TweenProperty(child, {ImageTransparency = targetTransparency}, 0.2)
                    end
                    if child.BackgroundTransparency < 1 then
                        TweenProperty(child, {BackgroundTransparency = targetTransparency}, 0.2)
                    end
                end
            end
        end
    end
end

-- Input handling
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed then
        if input.KeyCode == Enum.KeyCode.LeftControl then
            local nextInput = UserInputService.InputBegan:Wait()
            if nextInput.KeyCode == Enum.KeyCode.Left or nextInput.KeyCode == Enum.KeyCode.Right then
                ToggleUI()
            end
        end
    end
end)

-- Main Library Functions
function RelicLib:CreateWindow(title)
    local screenGui = CreateMainUI()
    local topBar = CreateTopBar()
    local categoryUI = CreateCategoryUI()
    
    -- Create content area with padding
    local contentFrame = Instance.new("ScrollingFrame")
    contentFrame.Name = "ContentFrame"
    contentFrame.Size = UDim2.new(1, -20, 1, -20)
    contentFrame.Position = UDim2.new(0, 10, 0, 10)
    contentFrame.BackgroundTransparency = 1
    contentFrame.BorderSizePixel = 0
    contentFrame.ScrollBarThickness = 4
    contentFrame.ScrollBarImageColor3 = Config.AccentColor
    contentFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    contentFrame.Parent = MainUI
    
    local layout = Instance.new("UIListLayout")
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Padding = UDim.new(0, 8)
    layout.Parent = contentFrame
    
    -- Auto-resize canvas
    layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        contentFrame.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 15)
    end)
    
    -- Add default categories
    self:AddCategory("Home", Config.HomeIcon, function() CurrentTab = "Home" end)
    self:AddCategory("Settings", Config.SettingsIcon, function() CurrentTab = "Settings" end)
    self:AddCategory("Info", Config.InfoIcon, function() CurrentTab = "Info" end)
    
    return {
        MainFrame = MainUI,
        CategoryFrame = CategoryUI,
        TopBar = TopBarUI,
        ContentFrame = contentFrame,
        ScreenGui = screenGui
    }
end

-- Create example preset
function RelicLib:CreatePresetExample()
    local window = self:CreateWindow("Relic Example")
    local content = window.ContentFrame
    
    self:CreateLabel(content, "🎮 Relic UI - Modern & Simple")
    self:CreateButton(content, "Test Button", function()
        self:CreateNotification("Success", "Button clicked!", 2, "bottom-right")
    end)
    
    self:CreateToggle(content, "Enable Feature", false, function(state)
        print("Toggle:", state)
    end)
    
    self:CreateSlider(content, "Speed", 0, 100, 50, function(value)
        print("Slider:", value)
    end)
    
    return window
end

-- Initialize
RelicLib:CreatePresetExample()
return RelicLib
